#line 2 "as3.lex.cc"

#line 4 "as3.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer as3_create_buffer
#define yy_delete_buffer as3_delete_buffer
#define yy_flex_debug as3_flex_debug
#define yy_init_buffer as3_init_buffer
#define yy_flush_buffer as3_flush_buffer
#define yy_load_buffer_state as3_load_buffer_state
#define yy_switch_to_buffer as3_switch_to_buffer
#define yyin as3in
#define yyleng as3leng
#define yylex as3lex
#define yylineno as3lineno
#define yyout as3out
#define yyrestart as3restart
#define yytext as3text
#define yywrap as3wrap
#define yyalloc as3alloc
#define yyrealloc as3realloc
#define yyfree as3free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE as3restart(as3in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int as3leng;

extern FILE *as3in, *as3out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE as3lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-as3lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < as3leng; ++yyl )\
                    if ( as3text[yyl] == '\n' )\
                        --as3lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up as3text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up as3text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via as3restart()), so that the user can continue scanning by
	 * just pointing as3in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when as3text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int as3leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow as3wrap()'s to do buffer switches
 * instead of setting up a fresh as3in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void as3restart (FILE *input_file  );
void as3_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE as3_create_buffer (FILE *file,int size  );
void as3_delete_buffer (YY_BUFFER_STATE b  );
void as3_flush_buffer (YY_BUFFER_STATE b  );
void as3push_buffer_state (YY_BUFFER_STATE new_buffer  );
void as3pop_buffer_state (void );

static void as3ensure_buffer_stack (void );
static void as3_load_buffer_state (void );
static void as3_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER as3_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE as3_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE as3_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE as3_scan_bytes (yyconst char *bytes,int len  );

void *as3alloc (yy_size_t  );
void *as3realloc (void *,yy_size_t  );
void as3free (void *  );

#define yy_new_buffer as3_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        as3ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            as3_create_buffer(as3in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        as3ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            as3_create_buffer(as3in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define as3wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *as3in = (FILE *) 0, *as3out = (FILE *) 0;

typedef int yy_state_type;

extern int as3lineno;

int as3lineno = 1;

extern char *as3text;
#define yytext_ptr as3text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up as3text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	as3leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[521] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       89,   87,   69,   69,   18,   61,   37,   34,   62,    5,
        6,   32,   30,   12,   31,   14,   33,   63,   63,   21,
       11,   17,   15,   16,   20,   60,   71,    9,   10,   36,
       69,   71,   69,   71,   69,   71,   71,   71,   71,   71,
       71,   69,   71,   69,   71,   71,   71,   71,    7,   35,
        8,   19,   87,   79,   82,   82,   78,   87,   84,   86,
       86,   83,   87,   77,   77,   73,   73,   73,   74,   87,
       73,   87,   69,   25,   48,   26,   45,   43,   28,   41,
       29,   42,    0,   66,    0,   68,   44,   66,   65,   65,

       65,   66,   67,    0,    0,   63,   56,   69,   38,   23,
       70,   22,   24,   39,   71,   47,   69,   52,   71,   69,
       71,   71,   71,    1,   71,   69,   71,   71,   71,   71,
       71,   71,   71,   71,    1,   55,   71,   71,   71,   71,
       71,   69,   71,   71,   71,   69,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   46,   27,    0,
       79,   82,   81,   80,   80,   84,   86,   85,    0,   75,
       73,   73,    0,    0,    0,    0,   73,   73,    0,   13,
        0,    0,   68,   68,   68,   66,   65,   65,   65,   65,
        0,   66,   64,   64,   49,   70,    0,   50,   40,   71,

       69,   71,   71,   71,   71,   71,   71,   69,   71,   71,
       71,   71,   71,    3,   71,   71,   71,   71,   71,   71,
       71,   57,   71,   71,   69,   71,   71,   71,   71,    4,
       71,   71,   71,   71,   71,   71,    2,   71,   71,   71,
       71,   80,   80,    0,   75,    0,    0,    0,    0,   73,
        0,   65,   65,   65,   65,   65,   64,   64,   64,   70,
       51,   71,    1,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   59,   71,    0,    0,   76,   75,    0,

        0,   72,   73,   65,   65,   65,   65,   65,   65,   64,
       64,   64,   64,   70,   71,   71,   71,   71,   71,    2,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,    0,   75,   72,
       65,   65,   65,   65,   65,   65,   65,   64,   64,   64,
       64,   64,   71,   71,   53,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   58,
        0,   65,   65,   65,   65,   65,   65,   65,   65,   64,
       64,   64,   64,   64,   64,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   64,   64,   64,   64,   64,   64,   64,
       71,   71,   71,   71,   71,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   64,   64,   64,   64,   64,
       64,   64,   64,   71,   71,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   64,   54,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   29,   29,   30,   31,   29,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   33,   32,   32,
       34,   35,   36,   37,   32,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   32,   47,   48,   49,   50,
       51,   52,   32,   53,   54,   55,   56,   57,   58,   59,
       60,   32,   61,   62,   63,   64,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   65,    1,    1,    1,
       66,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   67,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    1,    6,    1,
        1,    1,    1,    1,    1,    1,    7,    8,    8,    8,
        8,    9,    1,   10,   11,   12,    1,    1,   13,   13,
       13,   14,   14,    1,   15,    1,    1,   13,   13,   13,
       13,   13,   13,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[576] =
    {   0,
        0,    0,   66,   68,   73,   75,   71,   78,  110,    0,
     1040, 2843, 2843, 1037, 1013, 2843, 1008,   71, 2843, 2843,
     2843, 1004,   68, 2843,   72,   70,   82,  162,  168,  174,
     2843,   80, 1003,  165, 2843, 2843,    0, 2843, 2843, 1002,
      175,  971,  196,  160,  184,  195,  981,  151,  984,  181,
      960,  201,  971,  217,  200,  958,   47,  161, 2843,  199,
     2843, 2843,  946,    0, 2843, 1006, 2843,  244,    0, 2843,
     1005, 2843,    0, 2843,  989, 2843,  999,  236, 2843,  262,
      267,  932, 2843, 2843, 2843, 2843, 2843, 2843, 2843, 2843,
     2843, 2843,  980,  281,  983,  228, 2843,  295,  311,  327,

      343,  359, 2843,  373,  974,  386,  381,  392,  966, 2843,
      968, 2843, 2843,  244,    0, 2843,  229,  243,  943,  388,
      943,  930,  250,    0,  929,  400,  922,  920,  926,  919,
      912,  914,  908,  908,  242,    0,  920,   51,  900,  905,
      907,  407,  257,  909,  892,  360,  906,  891,  896,  233,
      250,  885,  891,  879,  885,  882,  872, 2843, 2843,  860,
        0, 2843, 2843,  315,  320,    0, 2843, 2843,    0,  899,
     2843,  419,  279,  345,    0,  236,  427,    0,  851, 2843,
      904,  898,  315, 2843,  910,  456,  464,  472,  491,  499,
      505,  516,  893,    0, 2843,  888,    0, 2843,  880,  863,

      412,  860,  845,  296,  858,  853,  856,  500,  847,  843,
      830,  845,  840,    0,  348,  831,  823,  831,  827,  826,
      821,    0,  816,  810,  505,  805,  802,  805,  796,    0,
      796,  806,  792,  792,  790,  795,    0,  794,  794,  784,
      786,  336, 2843,  298,  808,    0,  340,  377,  819,  538,
      804,  552,  568,  584,  600,  616,  802,    0,    0,    0,
     2843,  772,  374,  771,  761,  759,  763,  749,  749,  754,
      750,  757,  750,  738,  747,  735,  731,  746,  730,  734,
      723,  716,  719,  733,  730,  725,  720,  708,  711,  703,
      715,  694,  700,    0,  708,  350,    0, 2843,    0,  362,

      739,  391,    0,  632,  648,  664,  680,  696,  712,  723,
        0,    0,    0,    0,  690,  691,  694,  689,  693,  681,
      679,  675,  668,  679,  669,  370,  666,  671,  661,  647,
      620,  619,  603,  577,  571,  552,  552,  559,    0,  425,
      728,  744,  760,  776,  792,  808,  824,  563,    0,    0,
        0,    0,  523,  522,    0,  535,  504,  495,  496,  489,
      474,  468,  462,  451,  440,  431,  428,  426,  411,    0,
      438,  840,  856,  872,  888,  904,  920,  936,  952,  444,
        0,    0,    0,    0,    0,  414,  387,  374,  376,  342,
      323,  320,  286,  253,  968,  984, 1000, 1016, 1032, 1048,

     1064, 1080, 1096,  267,    0,    0,    0,    0,    0,    0,
      201,  174,  166,  143,  138, 1112, 1128, 1144, 1160, 1176,
     1192, 1208, 1224, 1240, 1256,   91,    0,    0,    0,    0,
        0,    0,    0,   38,   40, 1272, 1288, 1304, 1320, 1336,
     1352, 1368, 1384, 1400, 1416, 1432, 2843,    0, 1448, 1464,
     1480, 1496, 1512, 1528, 1544, 1560, 1576, 1592, 1608, 1624,
     1640, 1656, 1672, 1688, 1704, 1720, 1736, 1752, 1768, 1784,
     1800, 1816, 1832, 1848, 1864, 1880, 1896, 1912, 1928, 1944,
     1960, 1976, 1992, 2008, 2024, 2040, 2056, 2072, 2088, 2104,
     2120, 2136, 2152, 2168, 2184, 2200, 2216, 2232, 2248, 2264,

     2280, 2296, 2312, 2328, 2344, 2360, 2376, 2392, 2408, 2424,
     2440, 2456, 2472, 2488, 2504, 2520, 2536, 2552, 2568, 2843,
     2610, 2625, 2640, 2646, 2653, 2667, 2681, 2696, 2710, 2719,
     2730, 2744, 2759,  488, 2767,  396, 2774,  439,  491,  531,
      514, 2781,  536, 2792, 2806,  546,  553,  554, 2814,  551,
     2821,  561,  583,  593,  599, 2828,  600,  609,  615,  616,
      625,  631,  632,  641,  647,  648,  657,  663,  664,  673,
      679,  680,  689,  695,  696
    } ;

static yyconst flex_int16_t yy_def[576] =
    {   0,
      520,    1,  521,  521,  522,  522,  523,  523,  520,    9,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  524,  520,  520,  520,  520,  525,  520,  520,  520,
      525,  525,  525,  525,   43,  525,  525,  525,  525,  525,
      525,   43,  525,   43,  525,  525,  525,  525,  520,  520,
      520,  520,  520,  526,  520,  520,  520,  527,  528,  520,
      520,  520,  529,  520,  530,  520,  520,  520,  520,  531,
      531,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  532,  533,  520,  520,  520,  520,

      520,  520,  520,  520,  534,  520,  520,  520,  520,  520,
      535,  520,  520,  520,  525,  520,   43,   43,  525,   43,
      525,  525,  525,  525,  525,   43,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,   43,  525,  525,  525,   43,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  520,  520,  520,
      526,  520,  520,  520,  520,  528,  520,  520,  536,  537,
      520,  520,  520,  531,  538,  520,  538,   81,  520,  520,
      532,  532,  533,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  539,  540,  520,  535,  541,  520,  520,  525,

       43,  525,  525,  525,  525,  525,  525,   43,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,   43,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  520,  520,  542,  537,  543,  544,  520,  545,  544,
      532,  520,  520,  520,  520,  520,  546,  547,  548,  549,
      520,  525,   43,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  542,  550,  520,  551,  544,

      545,  545,  250,  520,  520,  520,  520,  520,  520,  552,
      553,  554,  555,  549,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  556,  551,  545,
      520,  520,  520,  520,  520,  520,  520,  557,  558,  559,
      560,  561,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      556,  520,  520,  520,  520,  520,  520,  520,  520,  562,
      563,  564,  565,  566,  567,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  568,  569,  570,  571,  572,  573,  574,
      525,  525,  525,  525,  525,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  568,  569,  570,  571,  572,
      573,  574,  575,  525,  525,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  525,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,    0,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520
    } ;

static yyconst flex_int16_t yy_nxt[2911] =
    {   0,
       12,   13,   14,   12,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   37,
       37,   37,   37,   38,   12,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   37,   48,   37,   49,   37,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   37,   37,
       59,   60,   61,   62,   12,   12,   63,   65,   66,   65,
       66,   67,   12,   67,   70,   71,   70,   71,   86,   12,
       89,   72,  448,   72,  154,   93,   91,   94,   94,   94,
       94,  230,   90,   95,   75,   87,   92,  155,   96,  220,

       68,   75,   68,  109,  110,  221,   97,   73,  426,   73,
       12,   76,   77,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   78,   12,   12,   12,   79,   12,   12,   80,   80,
       80,   80,   80,   12,   12,   12,   12,   81,   80,   81,
       80,   81,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   81,   80,   81,   80,   80,   80,   80,   80,   80,
       12,   12,   12,   12,   12,   12,   82,   98,  214,   99,
      100,  101,  102,   98,  230,  106,  106,  106,  106,  113,
      114,  103,  104,  124,  105,  107,  108,  103,  104,  134,

      135,  123,  103,  104,  136,  156,  157,  230,  103,  104,
      124,  108,  117,  108,  117,  108,  117,  108,  138,  125,
      105,  126,  139,  158,  435,  108,  117,  108,  118,  184,
      185,  127,  129,  120,  115,  117,  140,  117,  142,  248,
      130,  249,  128,  121,  150,  131,  122,  117,  115,  117,
      132,  115,  151,  143,  117,  434,  144,  172,  146,  152,
      159,  164,  164,  165,  115,  173,  117,  115,  198,  199,
      173,  147,  148,  172,  149,  172,  115,  172,  234,  115,
      117,  216,  173,  175,  426,  235,  176,  172,  177,  172,
      115,  176,  205,  115,  415,  217,  218,  206,   94,   94,

       94,   94,  226,  176,  178,  236,  178,  227,  178,  237,
      103,  104,  186,  186,  186,  186,  184,  185,  178,  297,
      178,  103,  104,  298,  103,  104,   98,  214,  187,  188,
      189,  102,  242,  242,  242,  103,  104,  243,  243,  243,
      103,  104,   98,  173,  189,  189,  189,  102,  173,  266,
      267,  103,  104,  243,  243,  243,  103,  104,   98,  414,
      190,  190,  190,  102,  176,  173,  175,  103,  104,  176,
      237,  297,  103,  104,   98,  298,  102,  102,  102,  102,
      248,  413,  249,  103,  104,  191,  176,  191,  103,  104,
      192,  192,  192,  192,  340,  275,  302,  117,  276,  103,

      104,   98,  108,  106,  106,  106,  106,  115,  244,  244,
      115,  117,  363,  108,  230,  103,  104,  412,  108,  364,
      108,  115,  108,  411,  115,  117,  103,  104,  340,  108,
      302,  108,  108,  108,  108,  115,  214,  117,  115,  208,
      172,  201,  202,  108,  117,  108,  225,  115,  172,  117,
      115,  247,  247,  263,  115,  124,  172,  115,  172,  115,
      172,  404,  115,  298,  250,  394,  250,  214,  250,  230,
      172,  393,  172,  186,  186,  186,  186,  392,  250,   98,
      250,  252,  253,  254,  102,  103,  104,   98,  391,  254,
      254,  254,  102,  103,  104,  194,  103,  104,  258,  390,

      194,  103,  104,  258,  103,  104,   98,  389,  255,  255,
      255,  102,  103,  104,   98,  230,  256,  256,  256,  102,
      103,  104,  192,  192,  192,  192,  260,  260,  103,  104,
      388,  103,  104,  192,  192,  192,  192,  117,  259,  103,
      104,  173,  117,  259,  124,  103,  387,  115,  299,  299,
      115,  284,  115,  311,  237,  115,  103,  214,  311,  172,
      312,  313,  176,  338,  338,  312,  313,   98,  349,  304,
      305,  306,  102,  349,  237,  303,  124,  303,  386,  303,
      380,  103,  104,   98,  298,  306,  306,  306,  102,  303,
      350,  303,  103,  104,  370,  350,  237,  103,  104,   98,

      351,  307,  307,  307,  102,  351,  352,  381,  103,  104,
      214,  352,  381,  103,  104,   98,  382,  308,  308,  308,
      102,  382,  383,  384,  103,  104,  124,  383,  384,  103,
      104,   98,  385,  309,  309,  309,  102,  385,  405,  406,
      103,  104,  214,  405,  406,  103,  104,   98,  407,  341,
      342,  343,  102,  407,  408,  409,  103,  104,  369,  408,
      409,  103,  104,   98,  410,  343,  343,  343,  102,  410,
      427,  428,  103,  104,  368,  427,  428,  103,  104,   98,
      429,  344,  344,  344,  102,  429,  430,  431,  103,  104,
      367,  430,  431,  103,  104,   98,  432,  345,  345,  345,

      102,  432,  433,  447,  103,  104,  366,  433,  447,  103,
      104,   98,  237,  346,  346,  346,  102,  365,  362,  361,
      103,  104,  230,  360,  359,  103,  104,   98,  358,  347,
      347,  347,  102,  357,  356,  355,  103,  104,  354,  353,
      348,  103,  104,   98,  302,  372,  373,  374,  102,  124,
      337,  237,  103,  104,  336,  237,  335,  103,  104,   98,
      334,  374,  374,  374,  102,  333,  332,  331,  103,  104,
      330,  329,  328,  103,  104,   98,  327,  375,  375,  375,
      102,  124,  326,  325,  103,  104,  324,  323,  322,  103,
      104,   98,  321,  376,  376,  376,  102,  320,  230,  319,

      103,  104,  318,  317,  316,  103,  104,   98,  315,  377,
      377,  377,  102,  214,  214,  237,  103,  104,  124,  310,
      184,  103,  104,   98,  302,  378,  378,  378,  102,  246,
      237,  295,  103,  104,  294,  293,  230,  103,  104,   98,
      292,  379,  379,  379,  102,  230,  291,  290,  103,  104,
      289,  288,  287,  103,  104,   98,  286,  395,  396,  397,
      102,  285,  283,  230,  103,  104,  282,  281,  280,  103,
      104,   98,  279,  397,  397,  397,  102,  278,  277,  274,
      103,  104,  273,  272,  271,  103,  104,   98,  124,  398,
      398,  398,  102,  270,  269,  268,  103,  104,  265,  264,

      262,  103,  104,   98,  261,  399,  399,  399,  102,  197,
      257,  184,  103,  104,  520,  251,  171,  103,  104,   98,
      246,  400,  400,  400,  102,   83,  241,  240,  103,  104,
      239,  230,  230,  103,  104,   98,  238,  401,  401,  401,
      102,  233,  232,  231,  103,  104,  229,  228,  224,  103,
      104,   98,  223,  402,  402,  402,  102,  222,  219,  215,
      103,  104,  214,  213,  124,  103,  104,   98,  212,  403,
      403,  403,  102,  211,  210,  209,  103,  104,  207,  204,
      203,  103,  104,   98,  200,  416,  417,  418,  102,  197,
      195,  193,  103,  104,  182,  180,  179,  103,  104,   98,

      171,  418,  418,  418,  102,  169,  167,  162,  103,  104,
      160,  153,  145,  103,  104,   98,  141,  419,  419,  419,
      102,  137,  133,  119,  103,  104,  116,  112,   88,  103,
      104,   98,   85,  420,  420,  420,  102,   84,   83,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  421,
      421,  421,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  422,  422,  422,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  423,  423,  423,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  424,  424,  424,

      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  425,  425,  425,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  436,
      437,  438,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  438,  438,  438,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  439,  439,  439,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  440,  440,  440,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  441,  441,  441,  102,  520,  520,  520,

      103,  104,  520,  520,  520,  103,  104,   98,  520,  442,
      442,  442,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  443,  443,  443,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  444,  444,  444,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  445,  445,  445,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  446,  446,  446,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  449,
      450,  451,  102,  520,  520,  520,  103,  104,  520,  520,

      520,  103,  104,   98,  520,  451,  451,  451,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  452,  452,  452,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  453,  453,  453,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  454,  454,  454,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  455,
      455,  455,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  456,  456,  456,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,

      520,  457,  457,  457,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  458,  458,  458,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  459,  459,  459,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  460,
      460,  460,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  461,  462,  463,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  463,  463,  463,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  464,  464,  464,

      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  465,  465,  465,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  466,
      466,  466,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  467,  467,  467,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  468,  468,  468,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  469,  469,  469,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  470,  470,  470,  102,  520,  520,  520,

      103,  104,  520,  520,  520,  103,  104,   98,  520,  471,
      471,  471,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  472,  472,  472,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  473,  473,  473,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  474,  475,  476,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  476,  476,  476,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  477,
      477,  477,  102,  520,  520,  520,  103,  104,  520,  520,

      520,  103,  104,   98,  520,  478,  478,  478,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  479,  479,  479,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  480,  480,  480,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  481,  481,  481,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  482,
      482,  482,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  483,  483,  483,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,

      520,  484,  484,  484,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  485,  485,  485,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  486,  486,  486,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  487,
      487,  487,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  488,  489,  490,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  490,  490,  490,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  491,  491,  491,

      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  492,  492,  492,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  493,
      493,  493,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  494,  494,  494,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  495,  495,  495,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  496,  496,  496,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  497,  497,  497,  102,  520,  520,  520,

      103,  104,  520,  520,  520,  103,  104,   98,  520,  498,
      498,  498,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  499,  499,  499,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  500,  500,  500,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  501,  501,  501,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  502,  502,  502,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  503,
      504,  505,  102,  520,  520,  520,  103,  104,  520,  520,

      520,  103,  104,   98,  520,  505,  505,  505,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  506,  506,  506,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  507,  507,  507,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  508,  508,  508,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  509,
      509,  509,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  510,  510,  510,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,

      520,  511,  511,  511,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  512,  512,  512,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  513,  513,  513,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  514,
      514,  514,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  515,  515,  515,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  516,  516,  516,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  517,  517,  517,

      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  518,  518,  518,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  503,
      504,  505,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  505,  505,  505,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  506,  506,  506,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  507,  507,  507,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  508,  508,  508,  102,  520,  520,  520,

      103,  104,  520,  520,  520,  103,  104,   98,  520,  509,
      509,  509,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  510,  510,  510,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  511,  511,  511,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  512,  512,  512,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  513,  513,  513,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  514,
      514,  514,  102,  520,  520,  520,  103,  104,  520,  520,

      520,  103,  104,   98,  520,  515,  515,  515,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,   98,
      520,  516,  516,  516,  102,  520,  520,  520,  103,  104,
      520,  520,  520,  103,  104,   98,  520,  517,  517,  517,
      102,  520,  520,  520,  103,  104,  520,  520,  520,  103,
      104,   98,  520,  518,  518,  518,  102,  520,  520,  520,
      103,  104,  520,  520,  520,  103,  104,   98,  520,  519,
      519,  519,  102,  520,  520,  520,  103,  104,  520,  520,
      520,  103,  104,   98,  520,  102,  102,  102,  102,  520,
      520,  520,  103,  104,  520,  520,  520,  103,  104,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  103,  104,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,  111,  111,  520,  111,  111,
      115,  520,  520,  520,  520,  115,  115,  161,  520,  520,
      161,  520,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  163,  520,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  166,  520,  520,  166,

      166,  520,  166,  166,  166,  166,  166,  166,  166,  166,
      168,  520,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  170,  520,  520,  520,  520,
      520,  170,  170,  174,  520,  520,  520,  174,  174,  520,
      174,  520,  174,  174,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  196,  196,  520,  520,  520,  196,
      196,  245,  245,  520,  520,  520,  245,  245,  296,  296,
      520,  520,  296,  296,  296,  300,  520,  520,  520,  300,

      520,  520,  300,  520,  300,  300,  301,  520,  520,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  314,  520,  520,  520,  520,  314,  314,  339,  520,
      520,  520,  520,  339,  339,  371,  520,  520,  520,  371,
      371,  371,   11,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520
    } ;

static yyconst flex_int16_t yy_chk[2911] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    3,    7,    4,    5,    5,    6,    6,   18,    8,
       23,    5,  435,    6,   57,   26,   25,   26,   26,   26,
       26,  434,   23,   27,    7,   18,   25,   57,   27,  138,

        3,    8,    4,   32,   32,  138,   27,    5,  426,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   28,  415,   28,
       28,   28,   28,   29,  414,   29,   29,   29,   29,   34,
       34,   28,   28,   48,   28,   30,   41,   29,   29,   48,

       48,   44,   28,   28,   48,   58,   58,  413,   29,   29,
       44,   30,   41,   30,   41,   30,   41,   43,   50,   44,
       28,   45,   50,   60,  412,   30,   41,   30,   41,   96,
       96,   45,   46,   43,   45,   43,   50,   43,   52,  176,
       46,  176,   45,   43,   55,   46,   43,   43,   52,   43,
       46,   52,   55,   52,   54,  411,   52,   78,   54,   55,
       60,   68,   68,   68,   54,   80,  117,   54,  114,  114,
       81,   54,   54,   78,   54,   78,  117,   78,  150,  117,
      118,  135,  173,   80,  404,  150,   80,   78,   81,   78,
      118,   81,  123,  118,  394,  135,  135,  123,   94,   94,

       94,   94,  143,  173,   81,  151,   81,  143,   81,  151,
       94,   94,   98,   98,   98,   98,  183,  183,   81,  244,
       81,   94,   94,  244,   98,   98,   99,  393,   99,   99,
       99,   99,  164,  164,  164,   98,   98,  165,  165,  165,
       99,   99,  100,  247,  100,  100,  100,  100,  174,  204,
      204,   99,   99,  242,  242,  242,  100,  100,  101,  392,
      101,  101,  101,  101,  247,  300,  174,  100,  100,  174,
      391,  296,  101,  101,  102,  296,  102,  102,  102,  102,
      248,  390,  248,  101,  101,  104,  300,  104,  102,  102,
      104,  104,  104,  104,  302,  215,  302,  146,  215,  102,

      102,  106,  107,  106,  106,  106,  106,  146,  536,  536,
      146,  263,  326,  108,  146,  106,  106,  389,  107,  326,
      107,  263,  107,  388,  263,  120,  106,  106,  340,  108,
      340,  108,  107,  108,  107,  120,  387,  126,  120,  126,
      172,  120,  120,  108,  142,  108,  142,  126,  177,  201,
      126,  538,  538,  201,  142,  386,  172,  142,  172,  201,
      172,  380,  201,  371,  177,  369,  177,  368,  177,  367,
      172,  366,  172,  186,  186,  186,  186,  365,  177,  187,
      177,  187,  187,  187,  187,  186,  186,  188,  364,  188,
      188,  188,  188,  187,  187,  534,  186,  186,  539,  363,

      534,  188,  188,  539,  187,  187,  189,  362,  189,  189,
      189,  189,  188,  188,  190,  361,  190,  190,  190,  190,
      189,  189,  191,  191,  191,  191,  541,  541,  190,  190,
      360,  189,  189,  192,  192,  192,  192,  208,  540,  190,
      190,  250,  225,  540,  208,  192,  359,  208,  543,  543,
      208,  225,  225,  546,  358,  225,  192,  357,  546,  250,
      547,  548,  250,  550,  550,  547,  548,  252,  552,  252,
      252,  252,  252,  552,  356,  250,  354,  250,  353,  250,
      348,  252,  252,  253,  338,  253,  253,  253,  253,  250,
      553,  250,  252,  252,  337,  553,  336,  253,  253,  254,

      554,  254,  254,  254,  254,  554,  555,  557,  253,  253,
      335,  555,  557,  254,  254,  255,  558,  255,  255,  255,
      255,  558,  559,  560,  254,  254,  334,  559,  560,  255,
      255,  256,  561,  256,  256,  256,  256,  561,  562,  563,
      255,  255,  333,  562,  563,  256,  256,  304,  564,  304,
      304,  304,  304,  564,  565,  566,  256,  256,  332,  565,
      566,  304,  304,  305,  567,  305,  305,  305,  305,  567,
      568,  569,  304,  304,  331,  568,  569,  305,  305,  306,
      570,  306,  306,  306,  306,  570,  571,  572,  305,  305,
      330,  571,  572,  306,  306,  307,  573,  307,  307,  307,

      307,  573,  574,  575,  306,  306,  329,  574,  575,  307,
      307,  308,  328,  308,  308,  308,  308,  327,  325,  324,
      307,  307,  323,  322,  321,  308,  308,  309,  320,  309,
      309,  309,  309,  319,  318,  317,  308,  308,  316,  315,
      310,  309,  309,  341,  301,  341,  341,  341,  341,  295,
      293,  292,  309,  309,  291,  290,  289,  341,  341,  342,
      288,  342,  342,  342,  342,  287,  286,  285,  341,  341,
      284,  283,  282,  342,  342,  343,  281,  343,  343,  343,
      343,  280,  279,  278,  342,  342,  277,  276,  275,  343,
      343,  344,  274,  344,  344,  344,  344,  273,  272,  271,

      343,  343,  270,  269,  268,  344,  344,  345,  267,  345,
      345,  345,  345,  266,  265,  264,  344,  344,  262,  257,
      251,  345,  345,  346,  249,  346,  346,  346,  346,  245,
      241,  240,  345,  345,  239,  238,  236,  346,  346,  347,
      235,  347,  347,  347,  347,  234,  233,  232,  346,  346,
      231,  229,  228,  347,  347,  372,  227,  372,  372,  372,
      372,  226,  224,  223,  347,  347,  221,  220,  219,  372,
      372,  373,  218,  373,  373,  373,  373,  217,  216,  213,
      372,  372,  212,  211,  210,  373,  373,  374,  209,  374,
      374,  374,  374,  207,  206,  205,  373,  373,  203,  202,

      200,  374,  374,  375,  199,  375,  375,  375,  375,  196,
      193,  185,  374,  374,  182,  181,  179,  375,  375,  376,
      170,  376,  376,  376,  376,  160,  157,  156,  375,  375,
      155,  154,  153,  376,  376,  377,  152,  377,  377,  377,
      377,  149,  148,  147,  376,  376,  145,  144,  141,  377,
      377,  378,  140,  378,  378,  378,  378,  139,  137,  134,
      377,  377,  133,  132,  131,  378,  378,  379,  130,  379,
      379,  379,  379,  129,  128,  127,  378,  378,  125,  122,
      121,  379,  379,  395,  119,  395,  395,  395,  395,  111,
      109,  105,  379,  379,   95,   93,   82,  395,  395,  396,

       77,  396,  396,  396,  396,   75,   71,   66,  395,  395,
       63,   56,   53,  396,  396,  397,   51,  397,  397,  397,
      397,   49,   47,   42,  396,  396,   40,   33,   22,  397,
      397,  398,   17,  398,  398,  398,  398,   15,   14,   11,
      397,  397,    0,    0,    0,  398,  398,  399,    0,  399,
      399,  399,  399,    0,    0,    0,  398,  398,    0,    0,
        0,  399,  399,  400,    0,  400,  400,  400,  400,    0,
        0,    0,  399,  399,    0,    0,    0,  400,  400,  401,
        0,  401,  401,  401,  401,    0,    0,    0,  400,  400,
        0,    0,    0,  401,  401,  402,    0,  402,  402,  402,

      402,    0,    0,    0,  401,  401,    0,    0,    0,  402,
      402,  403,    0,  403,  403,  403,  403,    0,    0,    0,
      402,  402,    0,    0,    0,  403,  403,  416,    0,  416,
      416,  416,  416,    0,    0,    0,  403,  403,    0,    0,
        0,  416,  416,  417,    0,  417,  417,  417,  417,    0,
        0,    0,  416,  416,    0,    0,    0,  417,  417,  418,
        0,  418,  418,  418,  418,    0,    0,    0,  417,  417,
        0,    0,    0,  418,  418,  419,    0,  419,  419,  419,
      419,    0,    0,    0,  418,  418,    0,    0,    0,  419,
      419,  420,    0,  420,  420,  420,  420,    0,    0,    0,

      419,  419,    0,    0,    0,  420,  420,  421,    0,  421,
      421,  421,  421,    0,    0,    0,  420,  420,    0,    0,
        0,  421,  421,  422,    0,  422,  422,  422,  422,    0,
        0,    0,  421,  421,    0,    0,    0,  422,  422,  423,
        0,  423,  423,  423,  423,    0,    0,    0,  422,  422,
        0,    0,    0,  423,  423,  424,    0,  424,  424,  424,
      424,    0,    0,    0,  423,  423,    0,    0,    0,  424,
      424,  425,    0,  425,  425,  425,  425,    0,    0,    0,
      424,  424,    0,    0,    0,  425,  425,  436,    0,  436,
      436,  436,  436,    0,    0,    0,  425,  425,    0,    0,

        0,  436,  436,  437,    0,  437,  437,  437,  437,    0,
        0,    0,  436,  436,    0,    0,    0,  437,  437,  438,
        0,  438,  438,  438,  438,    0,    0,    0,  437,  437,
        0,    0,    0,  438,  438,  439,    0,  439,  439,  439,
      439,    0,    0,    0,  438,  438,    0,    0,    0,  439,
      439,  440,    0,  440,  440,  440,  440,    0,    0,    0,
      439,  439,    0,    0,    0,  440,  440,  441,    0,  441,
      441,  441,  441,    0,    0,    0,  440,  440,    0,    0,
        0,  441,  441,  442,    0,  442,  442,  442,  442,    0,
        0,    0,  441,  441,    0,    0,    0,  442,  442,  443,

        0,  443,  443,  443,  443,    0,    0,    0,  442,  442,
        0,    0,    0,  443,  443,  444,    0,  444,  444,  444,
      444,    0,    0,    0,  443,  443,    0,    0,    0,  444,
      444,  445,    0,  445,  445,  445,  445,    0,    0,    0,
      444,  444,    0,    0,    0,  445,  445,  446,    0,  446,
      446,  446,  446,    0,    0,    0,  445,  445,    0,    0,
        0,  446,  446,  449,    0,  449,  449,  449,  449,    0,
        0,    0,  446,  446,    0,    0,    0,  449,  449,  450,
        0,  450,  450,  450,  450,    0,    0,    0,  449,  449,
        0,    0,    0,  450,  450,  451,    0,  451,  451,  451,

      451,    0,    0,    0,  450,  450,    0,    0,    0,  451,
      451,  452,    0,  452,  452,  452,  452,    0,    0,    0,
      451,  451,    0,    0,    0,  452,  452,  453,    0,  453,
      453,  453,  453,    0,    0,    0,  452,  452,    0,    0,
        0,  453,  453,  454,    0,  454,  454,  454,  454,    0,
        0,    0,  453,  453,    0,    0,    0,  454,  454,  455,
        0,  455,  455,  455,  455,    0,    0,    0,  454,  454,
        0,    0,    0,  455,  455,  456,    0,  456,  456,  456,
      456,    0,    0,    0,  455,  455,    0,    0,    0,  456,
      456,  457,    0,  457,  457,  457,  457,    0,    0,    0,

      456,  456,    0,    0,    0,  457,  457,  458,    0,  458,
      458,  458,  458,    0,    0,    0,  457,  457,    0,    0,
        0,  458,  458,  459,    0,  459,  459,  459,  459,    0,
        0,    0,  458,  458,    0,    0,    0,  459,  459,  460,
        0,  460,  460,  460,  460,    0,    0,    0,  459,  459,
        0,    0,    0,  460,  460,  461,    0,  461,  461,  461,
      461,    0,    0,    0,  460,  460,    0,    0,    0,  461,
      461,  462,    0,  462,  462,  462,  462,    0,    0,    0,
      461,  461,    0,    0,    0,  462,  462,  463,    0,  463,
      463,  463,  463,    0,    0,    0,  462,  462,    0,    0,

        0,  463,  463,  464,    0,  464,  464,  464,  464,    0,
        0,    0,  463,  463,    0,    0,    0,  464,  464,  465,
        0,  465,  465,  465,  465,    0,    0,    0,  464,  464,
        0,    0,    0,  465,  465,  466,    0,  466,  466,  466,
      466,    0,    0,    0,  465,  465,    0,    0,    0,  466,
      466,  467,    0,  467,  467,  467,  467,    0,    0,    0,
      466,  466,    0,    0,    0,  467,  467,  468,    0,  468,
      468,  468,  468,    0,    0,    0,  467,  467,    0,    0,
        0,  468,  468,  469,    0,  469,  469,  469,  469,    0,
        0,    0,  468,  468,    0,    0,    0,  469,  469,  470,

        0,  470,  470,  470,  470,    0,    0,    0,  469,  469,
        0,    0,    0,  470,  470,  471,    0,  471,  471,  471,
      471,    0,    0,    0,  470,  470,    0,    0,    0,  471,
      471,  472,    0,  472,  472,  472,  472,    0,    0,    0,
      471,  471,    0,    0,    0,  472,  472,  473,    0,  473,
      473,  473,  473,    0,    0,    0,  472,  472,    0,    0,
        0,  473,  473,  474,    0,  474,  474,  474,  474,    0,
        0,    0,  473,  473,    0,    0,    0,  474,  474,  475,
        0,  475,  475,  475,  475,    0,    0,    0,  474,  474,
        0,    0,    0,  475,  475,  476,    0,  476,  476,  476,

      476,    0,    0,    0,  475,  475,    0,    0,    0,  476,
      476,  477,    0,  477,  477,  477,  477,    0,    0,    0,
      476,  476,    0,    0,    0,  477,  477,  478,    0,  478,
      478,  478,  478,    0,    0,    0,  477,  477,    0,    0,
        0,  478,  478,  479,    0,  479,  479,  479,  479,    0,
        0,    0,  478,  478,    0,    0,    0,  479,  479,  480,
        0,  480,  480,  480,  480,    0,    0,    0,  479,  479,
        0,    0,    0,  480,  480,  481,    0,  481,  481,  481,
      481,    0,    0,    0,  480,  480,    0,    0,    0,  481,
      481,  482,    0,  482,  482,  482,  482,    0,    0,    0,

      481,  481,    0,    0,    0,  482,  482,  483,    0,  483,
      483,  483,  483,    0,    0,    0,  482,  482,    0,    0,
        0,  483,  483,  484,    0,  484,  484,  484,  484,    0,
        0,    0,  483,  483,    0,    0,    0,  484,  484,  485,
        0,  485,  485,  485,  485,    0,    0,    0,  484,  484,
        0,    0,    0,  485,  485,  486,    0,  486,  486,  486,
      486,    0,    0,    0,  485,  485,    0,    0,    0,  486,
      486,  487,    0,  487,  487,  487,  487,    0,    0,    0,
      486,  486,    0,    0,    0,  487,  487,  488,    0,  488,
      488,  488,  488,    0,    0,    0,  487,  487,    0,    0,

        0,  488,  488,  489,    0,  489,  489,  489,  489,    0,
        0,    0,  488,  488,    0,    0,    0,  489,  489,  490,
        0,  490,  490,  490,  490,    0,    0,    0,  489,  489,
        0,    0,    0,  490,  490,  491,    0,  491,  491,  491,
      491,    0,    0,    0,  490,  490,    0,    0,    0,  491,
      491,  492,    0,  492,  492,  492,  492,    0,    0,    0,
      491,  491,    0,    0,    0,  492,  492,  493,    0,  493,
      493,  493,  493,    0,    0,    0,  492,  492,    0,    0,
        0,  493,  493,  494,    0,  494,  494,  494,  494,    0,
        0,    0,  493,  493,    0,    0,    0,  494,  494,  495,

        0,  495,  495,  495,  495,    0,    0,    0,  494,  494,
        0,    0,    0,  495,  495,  496,    0,  496,  496,  496,
      496,    0,    0,    0,  495,  495,    0,    0,    0,  496,
      496,  497,    0,  497,  497,  497,  497,    0,    0,    0,
      496,  496,    0,    0,    0,  497,  497,  498,    0,  498,
      498,  498,  498,    0,    0,    0,  497,  497,    0,    0,
        0,  498,  498,  499,    0,  499,  499,  499,  499,    0,
        0,    0,  498,  498,    0,    0,    0,  499,  499,  500,
        0,  500,  500,  500,  500,    0,    0,    0,  499,  499,
        0,    0,    0,  500,  500,  501,    0,  501,  501,  501,

      501,    0,    0,    0,  500,  500,    0,    0,    0,  501,
      501,  502,    0,  502,  502,  502,  502,    0,    0,    0,
      501,  501,    0,    0,    0,  502,  502,  503,    0,  503,
      503,  503,  503,    0,    0,    0,  502,  502,    0,    0,
        0,  503,  503,  504,    0,  504,  504,  504,  504,    0,
        0,    0,  503,  503,    0,    0,    0,  504,  504,  505,
        0,  505,  505,  505,  505,    0,    0,    0,  504,  504,
        0,    0,    0,  505,  505,  506,    0,  506,  506,  506,
      506,    0,    0,    0,  505,  505,    0,    0,    0,  506,
      506,  507,    0,  507,  507,  507,  507,    0,    0,    0,

      506,  506,    0,    0,    0,  507,  507,  508,    0,  508,
      508,  508,  508,    0,    0,    0,  507,  507,    0,    0,
        0,  508,  508,  509,    0,  509,  509,  509,  509,    0,
        0,    0,  508,  508,    0,    0,    0,  509,  509,  510,
        0,  510,  510,  510,  510,    0,    0,    0,  509,  509,
        0,    0,    0,  510,  510,  511,    0,  511,  511,  511,
      511,    0,    0,    0,  510,  510,    0,    0,    0,  511,
      511,  512,    0,  512,  512,  512,  512,    0,    0,    0,
      511,  511,    0,    0,    0,  512,  512,  513,    0,  513,
      513,  513,  513,    0,    0,    0,  512,  512,    0,    0,

        0,  513,  513,  514,    0,  514,  514,  514,  514,    0,
        0,    0,  513,  513,    0,    0,    0,  514,  514,  515,
        0,  515,  515,  515,  515,    0,    0,    0,  514,  514,
        0,    0,    0,  515,  515,  516,    0,  516,  516,  516,
      516,    0,    0,    0,  515,  515,    0,    0,    0,  516,
      516,  517,    0,  517,  517,  517,  517,    0,    0,    0,
      516,  516,    0,    0,    0,  517,  517,  518,    0,  518,
      518,  518,  518,    0,    0,    0,  517,  517,    0,    0,
        0,  518,  518,  519,    0,  519,  519,  519,  519,    0,
        0,    0,  518,  518,    0,    0,    0,  519,  519,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  519,  519,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  524,  524,    0,  524,  524,
      525,    0,    0,    0,    0,  525,  525,  526,    0,    0,
      526,    0,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  527,    0,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  528,    0,    0,  528,

      528,    0,  528,  528,  528,  528,  528,  528,  528,  528,
      529,    0,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  530,    0,    0,    0,    0,
        0,  530,  530,  531,    0,    0,    0,  531,  531,    0,
      531,    0,  531,  531,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  535,  535,    0,    0,    0,  535,
      535,  537,  537,    0,    0,    0,  537,  537,  542,  542,
        0,    0,  542,  542,  542,  544,    0,    0,    0,  544,

        0,    0,  544,    0,  544,  544,  545,    0,    0,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  549,    0,    0,    0,    0,  549,  549,  551,    0,
        0,    0,    0,  551,  551,  556,    0,    0,    0,  556,
      556,  556,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int as3_flex_debug;
int as3_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *as3text;
#line 1 "as3.lex"

#line 8 "as3.lex"

#include "as3.lex.hh"

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string>
#include <memory>

using std::move;

void error(const char* msg, ...) {
    fprintf(stderr, "ERROR:%d: ", as3lineno);
    va_list vl;
    va_start(vl, msg);
    vfprintf(stderr, msg, vl);
    va_end(vl);
    fprintf(stderr, "\n");
}

token::token(Tok tok, std::string text)
    : tok(tok), text(move(text)) {}

#undef YY_DECL
#define YY_DECL token as3lex()

#define yyterminate() Tok::end

/* main character classes */
/* comments */
/* identifiers */
/* XML */
/* integer literals */
/* floating point literals */
/* string and character literals */
#line 1362 "as3.lex.cc"

#define INITIAL 0
#define STRING 1
#define CHARLITERAL 2
#define XML 3
#define XMLSTARTTAG 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int as3lex_destroy (void );

int as3get_debug (void );

void as3set_debug (int debug_flag  );

YY_EXTRA_TYPE as3get_extra (void );

void as3set_extra (YY_EXTRA_TYPE user_defined  );

FILE *as3get_in (void );

void as3set_in  (FILE * in_str  );

FILE *as3get_out (void );

void as3set_out  (FILE * out_str  );

int as3get_leng (void );

char *as3get_text (void );

int as3get_lineno (void );

void as3set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int as3wrap (void );
#else
extern int as3wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( as3text, as3leng, 1, as3out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( as3in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( as3in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, as3in))==0 && ferror(as3in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(as3in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int as3lex (void);

#define YY_DECL int as3lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after as3text and as3leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 85 "as3.lex"


    std::string token_text;
    int xml_depth = 0;

#line 1559 "as3.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! as3in )
			as3in = stdin;

		if ( ! as3out )
			as3out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			as3ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				as3_create_buffer(as3in,YY_BUF_SIZE );
		}

		as3_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of as3text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 521 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2843 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < as3leng; ++yyl )
				if ( as3text[yyl] == '\n' )
					   
    as3lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
#line 93 "as3.lex"
case 2:
#line 94 "as3.lex"
case 3:
#line 95 "as3.lex"
case 4:
YY_RULE_SETUP
#line 95 "as3.lex"
{ return Tok::keyword; }
	YY_BREAK
/* operators */
case 5:
YY_RULE_SETUP
#line 99 "as3.lex"
{ return Op::lparen; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "as3.lex"
{ return Op::rparen; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 101 "as3.lex"
{ return Op::lcurly; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "as3.lex"
{ return Op::rcurly; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "as3.lex"
{ return Op::lbracket; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 104 "as3.lex"
{ return Op::rbracket; }
	YY_BREAK
case 11:
#line 106 "as3.lex"
case 12:
#line 107 "as3.lex"
case 13:
#line 108 "as3.lex"
case 14:
#line 109 "as3.lex"
case 15:
#line 110 "as3.lex"
case 16:
#line 111 "as3.lex"
case 17:
#line 112 "as3.lex"
case 18:
#line 113 "as3.lex"
case 19:
#line 114 "as3.lex"
case 20:
#line 115 "as3.lex"
case 21:
#line 116 "as3.lex"
case 22:
#line 117 "as3.lex"
case 23:
#line 118 "as3.lex"
case 24:
#line 119 "as3.lex"
case 25:
#line 120 "as3.lex"
case 26:
#line 121 "as3.lex"
case 27:
#line 122 "as3.lex"
case 28:
#line 123 "as3.lex"
case 29:
#line 124 "as3.lex"
case 30:
#line 125 "as3.lex"
case 31:
#line 126 "as3.lex"
case 32:
#line 127 "as3.lex"
case 33:
#line 128 "as3.lex"
case 34:
#line 129 "as3.lex"
case 35:
#line 130 "as3.lex"
case 36:
#line 131 "as3.lex"
case 37:
#line 132 "as3.lex"
case 38:
#line 133 "as3.lex"
case 39:
#line 134 "as3.lex"
case 40:
#line 135 "as3.lex"
case 41:
#line 136 "as3.lex"
case 42:
#line 137 "as3.lex"
case 43:
#line 138 "as3.lex"
case 44:
#line 139 "as3.lex"
case 45:
#line 140 "as3.lex"
case 46:
#line 141 "as3.lex"
case 47:
#line 142 "as3.lex"
case 48:
#line 143 "as3.lex"
case 49:
#line 144 "as3.lex"
case 50:
#line 145 "as3.lex"
case 51:
#line 146 "as3.lex"
case 52:
#line 147 "as3.lex"
case 53:
#line 148 "as3.lex"
case 54:
#line 149 "as3.lex"
case 55:
#line 150 "as3.lex"
case 56:
#line 151 "as3.lex"
case 57:
#line 152 "as3.lex"
case 58:
#line 153 "as3.lex"
case 59:
#line 154 "as3.lex"
case 60:
YY_RULE_SETUP
#line 154 "as3.lex"
{ return Tok::op; }
	YY_BREAK
/* string literal */
case 61:
YY_RULE_SETUP
#line 157 "as3.lex"
{
                                  BEGIN(STRING);
                                  token_text = as3text;
                               }
	YY_BREAK
/* character literal */
case 62:
YY_RULE_SETUP
#line 163 "as3.lex"
{
                                  BEGIN(CHARLITERAL);
                                  token_text = as3text;
                               }
	YY_BREAK
/* numeric literals */
case 63:
#line 170 "as3.lex"
case 64:
#line 171 "as3.lex"
case 65:
#line 172 "as3.lex"
case 66:
#line 173 "as3.lex"
case 67:
YY_RULE_SETUP
#line 173 "as3.lex"
{ return Tok::number; }
	YY_BREAK
/* JavaDoc comments need a state so that we can highlight the @ controls */
/* comments */
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 178 "as3.lex"
{ return Tok::comment; }
	YY_BREAK
/* whitespace */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 181 "as3.lex"
{ }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 182 "as3.lex"
{  BEGIN(XMLSTARTTAG);
                                  token_text = as3text;
                                  xml_depth++;
                                  //xmlTagName = as3text + 1;
                               }
	YY_BREAK
/* identifiers */
case 71:
YY_RULE_SETUP
#line 188 "as3.lex"
{ return Tok::identifier; }
	YY_BREAK


case 72:
YY_RULE_SETUP
#line 194 "as3.lex"
{ token_text += as3text; }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 195 "as3.lex"
{ token_text += as3text; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 196 "as3.lex"
{ token_text += as3text; BEGIN(XML); }
	YY_BREAK


case 75:
YY_RULE_SETUP
#line 202 "as3.lex"
{ ++xml_depth; token_text += as3text; BEGIN(XMLSTARTTAG); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 203 "as3.lex"
{ token_text += as3text;
                             if (!--xml_depth) {
                                 BEGIN(INITIAL);
                                 return token(Tok::xml, move(token_text));
                             }
                            }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 209 "as3.lex"
{ token_text += as3text; }
	YY_BREAK


case 78:
YY_RULE_SETUP
#line 215 "as3.lex"
{
                                 BEGIN(INITIAL);
                                 // length also includes the trailing quote
                                 return token(Tok::string, move(token_text));
                            }
	YY_BREAK
case 79:
#line 222 "as3.lex"
case 80:
#line 224 "as3.lex"
/* escape sequences */
case 81:
YY_RULE_SETUP
#line 226 "as3.lex"
{ token_text += as3text; }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 228 "as3.lex"
{ BEGIN(INITIAL); }
	YY_BREAK


case 83:
YY_RULE_SETUP
#line 234 "as3.lex"
{
                                 BEGIN(INITIAL);
                                 // length also includes the trailing quote
                                 return token(Tok::string, move(token_text));
                               }
	YY_BREAK
case 84:
#line 241 "as3.lex"
/* escape sequences */
case 85:
YY_RULE_SETUP
#line 244 "as3.lex"
{ token_text += as3text; }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 245 "as3.lex"
{ BEGIN(INITIAL);  }
	YY_BREAK

/* error fallback */
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 250 "as3.lex"
error("invalid char: '%s'", as3text);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 252 "as3.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1964 "as3.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(CHARLITERAL):
case YY_STATE_EOF(XML):
case YY_STATE_EOF(XMLSTARTTAG):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed as3in at a new source and called
			 * as3lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = as3in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( as3wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * as3text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of as3lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					as3realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			as3restart(as3in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) as3realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 521 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 521 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 520);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up as3text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --as3lineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					as3restart(as3in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( as3wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve as3text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    as3lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void as3restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        as3ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            as3_create_buffer(as3in,YY_BUF_SIZE );
	}

	as3_init_buffer(YY_CURRENT_BUFFER,input_file );
	as3_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void as3_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		as3pop_buffer_state();
	 *		as3push_buffer_state(new_buffer);
     */
	as3ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	as3_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (as3wrap()) processing, but the only time this flag
	 * is looked at is after as3wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void as3_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	as3in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE as3_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) as3alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in as3_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) as3alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in as3_create_buffer()" );

	b->yy_is_our_buffer = 1;

	as3_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with as3_create_buffer()
 * 
 */
    void as3_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		as3free((void *) b->yy_ch_buf  );

	as3free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a as3restart() or at EOF.
 */
    static void as3_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	as3_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then as3_init_buffer was _probably_
     * called from as3restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void as3_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		as3_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void as3push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	as3ensure_buffer_stack();

	/* This block is copied from as3_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from as3_switch_to_buffer. */
	as3_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void as3pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	as3_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		as3_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void as3ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)as3alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in as3ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)as3realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in as3ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE as3_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) as3alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in as3_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	as3_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to as3lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       as3_scan_bytes() instead.
 */
YY_BUFFER_STATE as3_scan_string (yyconst char * yystr )
{
    
	return as3_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to as3lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE as3_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) as3alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in as3_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = as3_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in as3_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up as3text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		as3text[as3leng] = (yy_hold_char); \
		(yy_c_buf_p) = as3text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		as3leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int as3get_lineno  (void)
{
        
    return as3lineno;
}

/** Get the input stream.
 * 
 */
FILE *as3get_in  (void)
{
        return as3in;
}

/** Get the output stream.
 * 
 */
FILE *as3get_out  (void)
{
        return as3out;
}

/** Get the length of the current token.
 * 
 */
int as3get_leng  (void)
{
        return as3leng;
}

/** Get the current token.
 * 
 */

char *as3get_text  (void)
{
        return as3text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void as3set_lineno (int  line_number )
{
    
    as3lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see as3_switch_to_buffer
 */
void as3set_in (FILE *  in_str )
{
        as3in = in_str ;
}

void as3set_out (FILE *  out_str )
{
        as3out = out_str ;
}

int as3get_debug  (void)
{
        return as3_flex_debug;
}

void as3set_debug (int  bdebug )
{
        as3_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from as3lex_destroy(), so don't allocate here.
     */

    /* We do not touch as3lineno unless the option is enabled. */
    as3lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    as3in = stdin;
    as3out = stdout;
#else
    as3in = (FILE *) 0;
    as3out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * as3lex_init()
     */
    return 0;
}

/* as3lex_destroy is for both reentrant and non-reentrant scanners. */
int as3lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		as3_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		as3pop_buffer_state();
	}

	/* Destroy the stack itself. */
	as3free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * as3lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *as3alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *as3realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void as3free (void * ptr )
{
	free( (char *) ptr );	/* see as3realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 252 "as3.lex"
