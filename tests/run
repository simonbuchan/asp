#!/usr/bin/python

import difflib, fnmatch, glob, os, subprocess

TESTS_ROOT = os.path.dirname(__file__)

def try_read(path):
    try:
        f = open(path)
    except IOError:
        return None
    try:
        return f.read()
    finally:
        f.close()

def assert_equal(expected, actual):
    if expected != actual:
        raise AssertionError("""Assertion failed.
    expected: {!r}
    actual:   {!r}""".format(expected, actual))

def assert_equal_udiff(expected, actual):
    if expected != actual:
        if not isinstance(expected, str) or not isinstance(actual, str):
            assert_equal(expected, actual)
        diff = difflib.unified_diff(
                expected.splitlines(),
                actual.splitlines(),
                lineterm='',
                fromfile='expected',
                tofile='actual')
        diff = '\n'.join(diff)
        raise AssertionError("Assertion failed. diff:\n{}".format(diff))

def run_test(path):
    print('./as3 {}.in..'.format(path))
    test_in = try_read(path+'.in')
    expected_out = try_read(path+'.out')
    expected_err = try_read(path+'.err')
    PIPE = subprocess.PIPE
    p = subprocess.Popen('./as3', stdin=PIPE, stdout=PIPE, stderr=PIPE)
    actual_out, actual_err = p.communicate(input=test_in)
    assert_equal_udiff(expected_out or '', actual_out or '')
    assert_equal_udiff(expected_err or '', actual_err or '')
    print('  OK')

def run_as3_tests(root):
    for path in glob.glob(os.path.join(root, '*.in')):
        run_test(os.path.splitext(path)[0])

def run_all_tests():
    try:
        root = os.path.join(TESTS_ROOT, 'as3')
        run_as3_tests(root)
    except Exception as e:
        print(e)

if __name__ == '__main__':
    run_all_tests()

