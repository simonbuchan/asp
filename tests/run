#!/usr/bin/python

import difflib, fnmatch, glob, os, subprocess

TESTS_ROOT = os.path.dirname(__file__)

def try_read(path):
    try:
        f = open(path)
    except IOError:
        return None
    try:
        return f.read()
    finally:
        f.close()

def assert_equal(expected, actual):
    if expected != actual:
        raise AssertionError("""Assertion failed.
    expected: {!r}
    actual:   {!r}""".format(expected, actual))

def assert_equal_udiff(expected, actual, message=None,
                       expectedfile="expected", actualfile="actual"):
    if expected != actual:
        if not isinstance(expected, str) or not isinstance(actual, str):
            assert_equal(expected, actual)
        diff = list(difflib.unified_diff(
                expected.splitlines(),
                actual.splitlines(),
                lineterm='',
                fromfile=expectedfile,
                tofile=actualfile))
        if not expected.endswith('\n'):
            diff.append('\ No newline at end of {}'.format(expectedfile))
        if not actual.endswith('\n'):
            diff.append('\ No newline at end of {}'.format(actualfile))
        diff = '\n'.join(diff)
        raise AssertionError("{}\n{}".format(message or "Assertion failed.", diff))

def run_test(mode, path):
    desc = 'as3 {} {}'.format(mode, path)
    try:
        test_in = try_read(path+'.in')
        expected_out = try_read(path+'.out')
        expected_err = try_read(path+'.err')

        PIPE = subprocess.PIPE
        p = subprocess.Popen(['./as3', mode], stdin=PIPE, stdout=PIPE, stderr=PIPE)

        actual_out, actual_err = p.communicate(input=test_in)

        assert_equal_udiff(expected_out or '',
                           actual_out or '', 
                           message="Incorrect stdout output",
                           expectedfile=path+'.out',
                           actualfile='STDOUT')
        assert_equal_udiff(expected_err or '',
                           actual_err or '',
                           message="Incorrect stderr output",
                           expectedfile=path+'.err',
                           actualfile='STDERR')
    except Exception as e:
        print('- FAIL {}'.format(desc))
        print('*' * 20 + ' ERROR ' + '*' * 21)
        print(e)
        if test_in:
            print('*' * 20 + ' STDIN ' + '*' * 21)
            print(test_in)
        if actual_out:
            print('*' * 20 + ' STDOUT ' + '*' * 20)
            print(actual_out)
        if actual_err:
            print('*' * 20 + ' STDERR ' + '*' * 20)
            print(actual_err)
        print('*' * 48)
    else:
        print('- OK {}'.format(desc))

def run_as3_tests(mode, root):
    for path in sorted(glob.glob(os.path.join(root, '*.in'))):
        run_test(mode, os.path.splitext(path)[0])

def run_all_tests():
    run_as3_tests('--lex', os.path.join(TESTS_ROOT, 'lex'))
    run_as3_tests('--expression', os.path.join(TESTS_ROOT, 'expr'))
    run_as3_tests('--statement', os.path.join(TESTS_ROOT, 'stmt'))

if __name__ == '__main__':
    run_all_tests()

